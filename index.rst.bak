.. OptimalSegmentIntersection documentation master file, created by
   sphinx-quickstart on Thu Dec 24 10:26:01 2015.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

.. _link to tree slides: http://cs.tufts.edu/~atong01/slides/index.html


Optimal Algorithm for Intersections of a Set of Segments
========================================================

.. toctree::
   :maxdepth: 2

.. _Problem_Statement:

Problem Statement
-----------------
**Given a set of line segments in 2D what is the most efficient way to find all
of the intersections between those segments?**

This problem is useful in a number of areas of computer graphics and as a
building block to more useful problems in computational geometry such as whether
a polygon or poly line can be considered "simple".

Overview
--------

The object of this site is to present in an easy to understand way a few algorithms
used for 2D line intersection problems. This site will explore in particular a
few algorithms of interest:

#. The naive algorithm :math:`O(n^2)`
#. The standard algorithm :math:`O((n+k)log(n))`
#. Balaban’s optimal algorithm utilizing :math:`O(nlog(n) + k)` time and :math:`O(n)` space.

Links to the original papers can be found in the References section of this site.
They contain more complete explanations of the overviews found here.

The Bentley-Ottman Algorithm
----------------------------

First, we present an overview of the standard algorithm, the Bentley-Ottmann also
known as the sweep-line algorithm. This is the standard algorithm because it is
very easy to implement and often performs well enough, in the case of a close to
linear k, it performs algorithmically as well as the optimal.

The overall strategy behind the Bentley-Ottmann algorithm is to sweep a vertical
line across the plane, maintaining the current vertical order of all lines
intersecting our sweep line. This allows us to process “events” as they come up
in the sweep line, inserting, swapping, or deleting elements depending on the
type of event encountered.

The Bentley-Ottmann algorithm can be described in the following steps:

#. Initialize an event queue Q containing all x end points of lines in the set S
#. Initialize an empty BST T that contains in vertical sorted order all line segments that intersect the sweep line.
#. While Q is not empty, process the even E of minimum x value

    #. If E is a start point, insert the associated line into T, check segments
       immediately above and below our line, if they cross our line then add that event to Q.
    #. If E is an end point, remove the associated line from T, check segments
       immediately above and below our line, if they cross each other then add that event to Q.
    #. If E is an intersection, then check for intersections in its neighbors in
       the tree T, adding relevant intersections to Q.

Resource Analysis
+++++++++++++++++
Event Q size O(n+k), T size O(n), insert, delete, swap O(logn) per event, adding
intersection events O(logn) per event. Total time O((n+k)logn).

For a more complete analysis of the standard algorithms please visit Dan Sunday's
site on `Intersections of a set of segments <http://geomalgorithms.com/a09-_intersect-3.html>`_.

The Balaban Algorithm
---------------------
This algorithm still uses a form of the sweep line used in the Balaban algorithm.
However, instead of slicing the horizontal event space into unit length pieces
in a linear fashon, we instead slice the event space into strips in a binary tree
of strips.

The most important concept to understand this algorithm is the usefulness of a
staircase (defined below). With the concept of a staircase, the Balaban line 
intersection algorithm boils down into the following.

For a strip between two vertical lines
    - find a staircase Q and leftovers S
    - find intersections between Q and S
    - recurse on two smaller strips to find intersections between segments in S

There are a few corner cases that make this a bit tricky, but once you understand
this simple algorithm then the rest is implementation details. This algorithm
fundimentally works by partitioning the starting set into two useful subsets, the
staircase, and the rest. It's fairly trivial to see that intersections of the
starting set is the union of the intersections of each partitioned set, and 
the intersections between each pair of partitioned sets.

Preliminaries
+++++++++++++
First a couple of definitions and notational elements:

.. _strip:

strip :math:`\langle b,e\rangle`
    A strip represents a vertical strip from a beginning vertical line at :math:`x=b`
    to an ending vertical line at :math:`x=e`

.. _span:

span
    A segment *s* is said to span a strip_ :math:`\langle b,e\rangle` if *s* intersects both
    lines :math:`x=b` and :math:`x=e`

staircase :math:`\langle b,e\rangle`
    A staircase is a sorted set of non-intersecting segments that span_ the strip_ :math:`\langle b,e\rangle`.
    This is useful as within the strip, for any line segment has a point in a particular stair
    we can find the set of stairs that it intersects with as a range counting problem
    which is accomplished :math:`O(log(n))` time.

    **IMAGE HERE**

.. _complete_staircase:

complete staircase 
    A staircase is complete relative to some set *S* if each segment of *S* either
    does not span the strip_ :math:`\langle b, e\rangle` or intersects one of the
    stairs of the staircase.

This algorithm relys on a couple of key sub-functions, which we will present first for clarity.

.. code-block:: python
    :linenos:

    def intersections(s1, s2):
        """
        returns True if line segment s1 intersects line segment s2
        """

    def spans(s, b, e):
        """
        returns True if s spans the strip b,e, i.e. s.begin.x < b and s.end.x > e
        """

The functions above all run in constant time.

.. code-block:: python 
    :linenos:

    def findStaircaseIntersections(Q, L_p, L):
        """
        Finds all intersections between a staircase Q complete relative to L_p
        and L_p where union(Q, L_p) == L and |L| = k
        """
        stair = -1               #s is between Q[stair] and Q[stair+1]
        for s in L: 
            if s in L_p:
                #look up starting at Q[stair+1] stop when no intersection              
                #look down starting at Q[stair] stop when no intersection
            else:
                stair = stair + 1

The function findStaircaseIntersections runs in :math:`O(|L| + |Int_{\langle b,e \rangle}(L)|)` time,
as for each line in L we do a contant number (2) intersection checks + the number
of successful checks.

.. code-block:: python
    :linenos:

    def split(L, b, e):
        L_p = []
        Q   = []                    #Ordered from lowest to highest
        for j in range(1, k):
            if intersection(L[j], Q[-1]) == False and spans(L[j], b, e):
                Q.append(L[j])
            else:
                L_p.append(L[j])
        return L_p, Q

This function splits a set ordered by intersecton with line b (or e for that matter)
into a complete_staircase_ Q and a remaining set of lines L_p (L prime). By inspection
of the function it is easy to conclude that split runs in :math:`O(|L|)` time and space.

.. _SearchInStrip:

.. code-block:: python
    :linenos:

    def SearchInStrip(L, b, e):
        L_p, Q = split(L, b, e)
        if L_p == []:
            R = Q
            return R
        intersections, R_p = findStaircaseIntersections(Q, L_p) 
        SearchInStrip(L_p, R_p)
        R = Merge(Q, R_p) 

This function, given a set of line segments that span_ the strip_ b, e, finds
all of the intersections between segments that occur in the strip, and as a
useful addition, finds the ordering of the segments of the set on the right
side of the strip, i.e. returns set R where R contains all segments of L ordered
by vertical intersection with the line :math:`x=e`. Below is an example of the
execution of the function SearchInStrip. This reordering of the lines is important
so that we are able to perform the same operation on the next strip to the right
of our current strip, as ordering the rightside of our strip is equivalent to
ordering the left side of the next strip.

.. image:: images/figure3.png

The next question is how fast can we perform this procedure SearchInStrip_?
It turns out that this procedure will, for a given set of lines *L* ordered by
intersection with the line :math:`x=b`, run in :math:`O(|L| + |Int_{\langle b,e \rangle}(L)|)`
time.

However, the problem with SearchInStrip_ is that it only works if all segments
span the strip. In fact if all segments spanned all strips, (a.k.a. all segments were lines)
to solve the original Problem_Statement_ we could simply sort all of the line
segments by their slope (sort at :math:`x=-\infty`) and use a single SearchInStrip_
call.

Therefore for our algorithm to work with segments in general, we use another
function which we will call TreeSearch_. That deals with strips where adjacent
strips either add or remove one line segment. This works in general as we can
recursively split into strips that with 1/2 as many line beginnings and endings
using the fact that W.L.O.G we can relabel the *x* coordinates of the line
segments to be integers in the range 1...2N. We can then split down until each strip
is of size 1, where :math:`e-b = 1` in the new relabeled *x* coordinate system. 

Therefore we present a first version of tree search that does not achieve the
correct time complexity, but can be easily modified to do so.

In TreeSearch, to speed up the split function we represent set S as three sub-sets
**L**, **I**, and **R**. **L** represents an ordered set of all segments in S that
intersect the line :math:`x=b`, the left edge of the strip. **R** is the ordered
set that represents those segments in S that intersect the right side of the strip.
I is then an unordered set containing all segments in S that are neither in **R**
or **L**, geometrically, this is the set of segments that are inner to the strip
:math:`\langle b, e\rangle`.

Example:

.. image:: images/figure2.png

In this figure we have a strip with 5 segments. We will order **R** and **L**
from bottom to top.

.. math::
    L = [s1, s2, s3]

    R = [s4, s1, s2, s3]

    I = \{s5\}

.. _TreeSearch:

.. code-block:: python
    :linenos:

    def TreeSearch(L, I, b, e):
        if e - b == 1:
            R = SearchInStrip(L, b, e)
        else:
            L_p, Q =  split(L, b, e)
            intersections, R_p = findStaircaseIntersections(Q, L_p) 
            c = (b + e) / 2
            #Divide I into I_l, and I_r 
            R_l = TreeSearch(L, I_l, b, c)
            if p_c is a left endpoint:
                L_r = R_l.insert(p_c)
            else:
                L_r = R_l.delete(p_c)
            R_r = TreeSearch(L_r, I_r, c, e)
            intersections, R_p = findStaircaseIntersections(Q, L_p)     #TODO check
            for s in I:
                find stair of s                                         #using binary search 
            Find Int(Q, I)
            R = Merge(Q, R_r)

Demonstration `link to tree slides`_

Correctness argument for TreeSearch
+++++++++++++++++++++++++++++++++++



Time Complexity for TreeSearch
++++++++++++++++++++++++++++++




Modifications for Optimal Algorithm
+++++++++++++++++++++++++++++++++++


Key Points
----------
By spliting out staircases we can reduce the amount of work we have to do
at each stage by a little bit. Since staircase size is roughly inversely related
to the number of intersections, we get "large enough" staircases to reduce our work.

Recursively,
    if all segments span the strip then no more splits, and use SearchInStrip
    Split out the largest staircase possible,
    find intersections between the staircase and segments intersecting the left edge
    recurse on left side
    fix the boundary (only one change)
    recurse on the right side
    find intersections between the staircase and segments intersecting the right edge
    
    find intersections between those lines intersecting neither edge and the staircase


For any strip, find a staircase, and the leftovers S, find the intersections between
S and the staircase quickly, recursively find the intersections between elements in S


- W.L.O.G we can relabel the *x* coordinates of the line segments to be integers
  in the range 1...2N. This enables us to find the median and next strip_ in :math:`O(1)` time.
- We can perform a SearchInStrip_ finding all intersections in a strip in
  :math:`O(|L| + |Int_{\langle b,e \rangle}(L)|)` time, assuming that we have the
  segments in sorted vertical order on one side of the strip.
- Finding the intersections in a strip_ allows us to find the sorted order of
  the segments on the otherside of the strip in :math:`O(|L|)` time by simple
  merging of two ordered lists.
- Finding the itnersections between a staircase and a set L is an :math:`O(|L|)`
  operation. 


References
----------
.. [#] I.J. Balaban, "An Optimal Algorithm  for Finding Segment Intersections", Proc. 11-th Ann. ACM Sympos. Comp. Geom., 211-219 (1995)
.. [#] Bernard Chazelle & Herbert  Edelsbrunner, "An Optimal Algorithm for Intersecting Line Segments in the  Plane", J. ACM 39, 1-54 (1992)
.. [#] Brad Appleton, C++ code for an AVL balanced Tree, see: www.bradapp.com, oopweb.com/Algorithms/Documents/AvlTrees/VolumeFrames.html, www.bradapp.com/ftp/src/libs/C++/AvlTrees.html (1997)

* :ref:`search`

